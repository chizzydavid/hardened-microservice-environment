Docker Threat Modeling
Given Docker's system components and the STRIDE framework, identify five potential threats that may arise.

1. Spoofing - Client traffic from the Docker client to the Docker daemon could be spoofed, or intercepted by a malicious party and replayed. Transport Layer Security (TLS) can be implemented to secure communication between the componets. And within the docker network inter-container-communication should be disabled.
2. Elevation of Privilege - When a docker image is built without specifying a user, it defaults to executing the container as the root user, this poses an obvious risk in the hands of an attacker. A user should be specified on the Dockerfile during build and the docker daemon should restrict the container from adding new privileges.
3. Tampering - Images in a container registry may be tampered with, leading to supply chain injections. This is the biggest risk regarding the supply chain. An attacker may implant a malicious image into the image registry and entice organizations to use it. 
4. Denial of Service - A Docker distribution may not properly restrict the amount of content accepted by a user. This allows remote attackers to cause a denial of service. This could affect registry security.
5. Information Disclosure - Sensitive data such as secrets may be left in the container image and exposed at runtime affecting image security and potentially much more, depending on the scope of the credentials. This would affect image security.



Kubernetes Threat Modeling
Given Kubernetes' system components and the STRIDE framework, identify five potential threats that may arise.

1. Tampering - The configuration of etcd may be tampered with by an attacker, modifying vital system-level configurations such as pod specs. This can be mitigated by restricting permissions on etcd files to 644 or more restrictive and that the pod spec file is set to root ownership.
2. Repudiation - Unauthorized changes can be made to kubelet configuration. To avoid this, kubelet authentication should be set using TLS and basic authentication should be disabled.
3. Information Disclosure — Major approaches focuses on being able to read secret data from the cluster directly by exploiting misconfigured RBAC permissions. Other approaches include viewing sensitive data stored within logs and eavesdropping on network traffic.
4. Spoofing — Kubernetes ships with insecure defaults, for example, all pods have `CAP_NET_RAW` permissions. This allows all pods to open raw sockets and inject malicious packets into the Kubernetes container network, which may lead to spoofing.
5. Denial of Service — Kubernetes ships without an upper limit for setting the memory footprint. This may lead to a denial of service which could result in exhausting resources needed to run the pod.



Docker-bench Run Results and Analysis
From the failed findings, select and document 3 findings from the Docker-bench results that you want to harden based on the 5 attack surface areas you identified in Step 1. At least 1 of the 3 hardened findings should be different from the ones mentioned in the exercise (i.e. 5.10, 5.14, and 5.22).

[FAIL] 2.14 Ensure Userland Proxy is Disabled (Scored)
According to the CIS Docker Benchmark v1.2:
The Docker daemon starts a userland proxy service for port forwarding whenever a port is exposed.
The Docker engine provides two mechanisms for forwarding ports from the host to containers, hairpin NAT, and the use of a userland proxy. In most circumstances, the hairpin NAT mode is preferred as it improves performance and makes use of native Linux iptables functionality instead of using an additional component.
Remediation Steps
This should be disabled in favour of preferred NAT alternative. This is remediated by updating the docker daemon configuration file at /etc/docker/daemon.json with  
{
  "userland-proxy": false
}


[FAIL] 2.1 Ensure network traffic is restricted between containers on the default bridge (Scored)
According to the CIS Docker Benchmark v1.2:
By default, all network traffic is allowed between containers on the same host on the default network bridge. If not desired, restrict all inter-container communication. 
By default, unrestricted network traffic is enabled between all containers on the same host on the default network bridge. Thus, each container has the potential of reading all packets across the container network on the same host. This might lead to an unintended and unwanted disclosure of information to other containers. Hence, restrict inter-container communication on the default network bridge.
Remediation Steps
Intercepted communications between containers can be spoofed. Remediation is done by creating custom bridge networks that keep communication within.
docker network create --driver bridge "com.docker.network.bridge.enable_icc"="false" test-network
The above command creates a new network bridge and sets icc(inter container communication) as false
After which we can update each running container to point to its respective custom network.


[FAIL] 2.17 Ensure containers are restricted from acquiring new privileges (Scored)
According to the CIS Docker Benchmark v1.2:
By default you should restrict containers from acquiring additional privileges via suid or sgid.
A process can set the no_new_priv bit in the kernel and this persists across forks, clones and execve. The no_new_priv bit ensures that the process and its child processes do not gain any additional privileges via suid or sgid bits. This reduces the security risks associated with many dangerous operations because there is a much reduced ability to subvert privileged binaries.
Remediation Steps
This is a safeguard against potential elevation of privelege attacks, setting this at the daemon level ensures that by default all new containers are restricted from acquiring new privileges.
Edit the docker daemon configuration file at /etc/docker/daemon.json with  
{
  "no-new-priveleges": true
}

